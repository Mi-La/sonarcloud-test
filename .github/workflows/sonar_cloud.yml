name: SonarCloud C/C++ CI

on:
  workflow_run:
    workflows: [Build]
    types: [completed]

jobs:
  build:
    name: sonar_cloud
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # shallow clones should be disabled for a better relevancy of analysis
        submodules: recursive

    - name: Install sonar-scanner and build-wrapper
      uses: SonarSource/sonarcloud-github-c-cpp@v2

    - name: 'Download build wrapper output directory'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "build_wrapper"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build_wrapper.zip`, Buffer.from(download.data));
      - name: 'Unzip build wrapper output directory'
        run: unzip build_wrapper.zip -d ${{ env.BUILD_WRAPPER_OUTPUT_DIR }}

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
            --define sonar.projectKey="Mi-La_sonarcloud-test" \
            --define sonar.organization="mi-la" \
            --define sonar.sourceEncoding="UTF-8" \
            --define sonar.exclusions="**/CMakeFiles/**/*" \
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
