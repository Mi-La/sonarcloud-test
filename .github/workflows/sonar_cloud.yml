name: SonarCloud C/C++ CI
run-name: "Sonar Cloud C/C++ CI (Trigger #${{ github.event.workflow_run.run_number }})"

on:
  workflow_run:
    workflows: [ SonarCloud Trigger ]
    types: [ completed ]

jobs:
  build:
    name: sonar_cloud
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper

    steps:
    - name: "Echo"
      run: |
        echo "${{ toJson(github.event.workflow_run) }}"

    - name: Download PR number artifact
      if: github.event.workflow_run.event == 'pull_request'
      uses: dawidd6/action-download-artifact@v6
      with:
        workflow: Build
        run_id: ${{ github.event.workflow_run.id }}
        name: PR_NUMBER

    - name: Read PR_NUMBER.txt
      if: github.event.workflow_run.event == 'pull_request'
      id: pr_number
      uses: juliangruber/read-file-action@v1
      with:
        path: ./PR_NUMBER.txt

    - name: Request GitHub API for PR data
      if: github.event.workflow_run.event == 'pull_request'
      uses: octokit/request-action@v2.x
      id: get_pr_data
      with:
        route: GET /repos/{full_name}/pulls/{number}
        number: ${{ steps.pr_number.outputs.content }}
        full_name: ${{ github.event.repository.full_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.workflow_run.head_repository.full_name }}
        ref: ${{ github.event.workflow_run.head_branch }}
        fetch-depth: 0 # shallow clones should be disabled for a better relevancy of analysis
        submodules: recursive

    - name: Checkout base branch
      if: github.event.workflow_run.event == 'pull_request'
      run: |
        git remote add upstream ${{ github.event.repository.clone_url }}
        git fetch upstream
        git checkout -B ${{ fromJson(steps.get_pr_data.outputs.data).base.ref }} upstream/${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}
        git checkout origin/${{ github.event.workflow_run.head_branch }}
        git clean -ffdx && git reset --hard HEAD

    - name: "list branches"
      run: |
        git branch -a

    - name: Install sonar-scanner and build-wrapper
      uses: SonarSource/sonarcloud-github-c-cpp@v2

    - name: Download build & build wrapper output directory
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "build"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build.zip`, Buffer.from(download.data));

    - name: Unzip build wrapper output directory
      run: unzip build.zip

    - name: PR info
      if: github.event.workflow_run.event == 'pull_request'
      run: |
        echo "PR_KEY=${{ fromJson(steps.get_pr_data.outputs.data).number }}" >> ${GITHUB_ENV}
        echo "PR_BRANCH=${{ fromJson(steps.get_pr_data.outputs.data).head.ref }}"  >> ${GITHUB_ENV}
        echo "PR_BASE=${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}"  >> ${GITHUB_ENV}

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
            --define sonar.projectKey="Mi-La_sonarcloud-test" \
            --define sonar.organization="mi-la" \
            --define sonar.sourceEncoding="UTF-8" \
            --define sonar.exclusions="**/CMakeFiles/**/*" \
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" \
            --define sonar.scm.revision=${{ github.event.workflow_run.head_sha }} \
            --define sonar.pullrequest.key=${{ env.PR_KEY }} \
            --define sonar.pullrequest.branch=${{ env.PR_BRANCH }} \
            --define sonar.pullrequest.base=${{ env.PR_BASE }}
