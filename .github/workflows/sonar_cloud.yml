name: SonarCloud C/C++ CI

on:
  workflow_run:
    workflows: [Build]
    types: [completed]

jobs:
  build:
    name: sonar_cloud
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # shallow clones should be disabled for a better relevancy of analysis
        submodules: recursive

    - name: Install sonar-scanner and build-wrapper
      uses: SonarSource/sonarcloud-github-c-cpp@v2

    - name: Request GitHub API for PR data
      uses: octokit/request-action@v2.x
      id: get_pr_data
      with:
        route: GET /repos/{full_name}/pulls/1
        full_name: ${{ github.event.repository.full_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: "Echo"
      run: |
        echo "${{ github.event.workflow_run.head_repository.full_name }}"
        echo "${{ github.event.workflow_run.head_branch }}"
        echo "${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}"
        echo "upstream/${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}"
        echo "${{ github.event.workflow_run.head_branch }}"

    - name: Download build & build wrapper output directory
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "build"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build.zip`, Buffer.from(download.data));

    - name: Unzip build wrapper output directory
      run: unzip build.zip

    - name: 'ls'
      run:
        ls -la -R

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
            --define sonar.projectKey="Mi-La_sonarcloud-test" \
            --define sonar.organization="mi-la" \
            --define sonar.sourceEncoding="UTF-8" \
            --define sonar.exclusions="**/CMakeFiles/**/*" \
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" \
            --define sonar.scm.revision=${{ github.event.workflow_run.head_sha }} \
            --define sonar.pullrequest.key=${{ github.event.workflow_run.pull_requests[0].number }} \
            --define sonar.pullrequest.branch=${{ github.event.workflow_run.pull_requests[0].head.ref }} \
            --define sonar.pullrequest.base=${{ github.event.workflow_run.pull_requests[0].base.ref }}
